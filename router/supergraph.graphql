schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs-entitlements.cloud.capitalone.com/enterprise_entitle/v0.1", import: ["@enterprise_entitle"])
{
  query: Query
}

directive @enterprise_entitle(enforcement_context: EnforcementContext) on OBJECT | FIELD_DEFINITION | INTERFACE | SCALAR | ENUM

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Account
  @join__type(graph: BANK_ACCOUNT, key: "referenceId")
  @join__type(graph: CUSTOMER, key: "referenceId")
{
  referenceId: String!
  balance: Float @join__field(graph: BANK_ACCOUNT) @enterprise_entitle(enforcement_context: {preEnforcementIdentifier: {accountIdentifierArgument: "accountReferenceId"}, postEnforcementIdentifier: {accountIdentifierField: "accountReferenceId"}})
  type: String! @join__field(graph: BANK_ACCOUNT)
  status: BankAccountStatus! @join__field(graph: BANK_ACCOUNT)
  availableCreditAmount: AvailableCreditAmount @join__field(graph: BANK_ACCOUNT)
  countryCode: String! @join__field(graph: CUSTOMER)
}

type AvailableCreditAmount
  @join__type(graph: BANK_ACCOUNT)
{
  availableSpendingCreditAmount: Float!
  availableCashCreditAmount: Float!
}

enum BankAccountStatus
  @join__type(graph: BANK_ACCOUNT)
{
  OPEN @join__enumValue(graph: BANK_ACCOUNT)
  CLOSED @join__enumValue(graph: BANK_ACCOUNT)
  FRAUD @join__enumValue(graph: BANK_ACCOUNT)
  DORMANT @join__enumValue(graph: BANK_ACCOUNT)
}

type Customer
  @join__type(graph: CUSTOMER)
{
  referenceId: String!
  name: String!
  last4ssn: String! @enterprise_entitle(enforcement_context: {preEnforcementIdentifier: {accountIdentifierArgument: "accountReferenceId"}, postEnforcementIdentifier: {accountIdentifierField: "accountReferenceId"}})
  age: Int! @enterprise_entitle(enforcement_context: {preEnforcementIdentifier: {accountIdentifierArgument: "accountReferenceId"}, postEnforcementIdentifier: {accountIdentifierField: "accountReferenceId"}})
  address: String!
  accounts: [Account]
}

input EnforcementContext
  @join__type(graph: BANK_ACCOUNT)
  @join__type(graph: CUSTOMER)
{
  preEnforcementIdentifier: PreEnforcementIdentifierInput
  postEnforcementIdentifier: PostEnforcementIdentifierInput
}

scalar join__FieldSet

enum join__Graph {
  BANK_ACCOUNT @join__graph(name: "bank-account", url: "http://localhost:4001/query")
  CUSTOMER @join__graph(name: "customer", url: "http://localhost:4002/query")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

input PostEnforcementIdentifierInput
  @join__type(graph: BANK_ACCOUNT)
  @join__type(graph: CUSTOMER)
{
  customerIdentifierField: String
  accountIdentifierField: String
  cardIdentifierField: String
}

input PreEnforcementIdentifierInput
  @join__type(graph: BANK_ACCOUNT)
  @join__type(graph: CUSTOMER)
{
  customerIdentifierArgument: String
  accountIdentifierArgument: String
  cardIdentifierArgument: String
}

type Query
  @join__type(graph: BANK_ACCOUNT)
  @join__type(graph: CUSTOMER)
{
  bankAccounts: [Account] @join__field(graph: BANK_ACCOUNT)
  customers: [Customer] @join__field(graph: CUSTOMER)
  customerById(customerReferenceId: String!): Customer @join__field(graph: CUSTOMER) @enterprise_entitle(enforcement_context: {preEnforcementIdentifier: {accountIdentifierArgument: "accountReferenceId"}, postEnforcementIdentifier: {accountIdentifierField: "accountReferenceId"}})
  customerByIdAndAccount(customerReferenceId: String!, accountReferenceId: String!): Customer @join__field(graph: CUSTOMER)
  accounts(customerReferenceId: String!): [Account] @join__field(graph: CUSTOMER) @enterprise_entitle(enforcement_context: {preEnforcementIdentifier: {accountIdentifierArgument: "accountReferenceId"}, postEnforcementIdentifier: {accountIdentifierField: "accountReferenceId"}})
  account(accountReferenceId: String!): Account @join__field(graph: CUSTOMER)
}
