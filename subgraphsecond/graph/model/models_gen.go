// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	AccountReferenceID string         `json:"accountReferenceId"`
	Status             *AccountStatus `json:"status,omitempty"`
	Type               *string        `json:"type,omitempty"`
	Balance            *float64       `json:"balance,omitempty"`
	Cards              []*Card        `json:"cards,omitempty"`
	Transactions       []*Transaction `json:"transactions,omitempty"`
}

func (Account) IsEntity() {}

type AvailableCreditAmount struct {
	SpendingCreditAmount *float64 `json:"spendingCreditAmount,omitempty"`
	CashCreditAmount     *float64 `json:"cashCreditAmount,omitempty"`
}

type Card struct {
	CardReferenceID string  `json:"cardReferenceId"`
	Status          *string `json:"status,omitempty"`
}

func (Card) IsEntity() {}

type Query struct {
}

type Transaction struct {
	TransactionID         string                 `json:"transactionId"`
	Amount                *float64               `json:"amount,omitempty"`
	Currency              *string                `json:"currency,omitempty"`
	Status                *string                `json:"status,omitempty"`
	TransactionDate       *string                `json:"transactionDate,omitempty"`
	AvailableCreditAmount *AvailableCreditAmount `json:"availableCreditAmount,omitempty"`
}

func (Transaction) IsEntity() {}

type AccountStatus string

const (
	AccountStatusOpen    AccountStatus = "OPEN"
	AccountStatusClosed  AccountStatus = "CLOSED"
	AccountStatusFraud   AccountStatus = "FRAUD"
	AccountStatusDormant AccountStatus = "DORMANT"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusOpen,
	AccountStatusClosed,
	AccountStatusFraud,
	AccountStatusDormant,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusOpen, AccountStatusClosed, AccountStatusFraud, AccountStatusDormant:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AccountStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AccountStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
